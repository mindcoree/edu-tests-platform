"""base

Revision ID: 0656ceed83f7
Revises:
Create Date: 2025-07-12 22:59:32.650556

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "0656ceed83f7"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "auth_entity",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("login", sa.String(), nullable=False),
        sa.Column("hash_password", sa.String(), nullable=False),
        sa.Column(
            "role",
            sa.Enum("ADMIN", "STUDENT", "TEACHER", "SPECIALIST", name="role"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("hash_password"),
        sa.UniqueConstraint("login"),
    )
    op.create_table(
        "role_request",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("entity_id", sa.Integer(), nullable=False),
        sa.Column(
            "requested_role",
            sa.Enum("STUDENT", "TEACHER", "SPECIALIST", name="desiredrole"),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum(
                "PENDING", "APPROVED", "REJECTED", name="rolerequeststatus"
            ),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["entity_id"], ["auth_entity.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "tests",
        sa.Column(
            "test_id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("teacher_id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("image_url", sa.Text(), nullable=True),
        sa.Column(
            "status",
            sa.Enum("DRAFT", "PUBLISHED", "ARCHIVED", name="teststatus"),
            server_default="DRAFT",
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["teacher_id"], ["auth_entity.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("test_id"),
        sa.UniqueConstraint("title"),
    )
    op.create_index(
        op.f("ix_tests_teacher_id"), "tests", ["teacher_id"], unique=False
    )
    op.create_table(
        "questions",
        sa.Column(
            "question_id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("test_id", sa.UUID(), nullable=False),
        sa.Column("question_text", sa.Text(), nullable=False),
        sa.Column("image_url", sa.Text(), nullable=True),
        sa.Column("order", sa.Integer(), nullable=True),
        sa.Column("points", sa.Integer(), server_default="1", nullable=False),
        sa.ForeignKeyConstraint(
            ["test_id"], ["tests.test_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("question_id"),
    )
    op.create_table(
        "test_attempts",
        sa.Column(
            "attempt_id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("student_id", sa.Integer(), nullable=False),
        sa.Column("test_id", sa.UUID(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("IN_PROGRESS", "COMPLETED", name="testattemptstatus"),
            server_default="IN_PROGRESS",
            nullable=False,
        ),
        sa.Column("score", sa.Float(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["student_id"], ["auth_entity.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["test_id"], ["tests.test_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("attempt_id"),
    )
    op.create_table(
        "answer_options",
        sa.Column(
            "answer_id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("question_id", sa.UUID(), nullable=False),
        sa.Column("answer_text", sa.Text(), nullable=True),
        sa.Column("image_url", sa.Text(), nullable=True),
        sa.Column("is_correct", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["question_id"], ["questions.question_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("answer_id"),
    )
    op.create_table(
        "student_answers",
        sa.Column(
            "student_answer_id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("attempt_id", sa.UUID(), nullable=False),
        sa.Column("question_id", sa.UUID(), nullable=False),
        sa.Column("is_correct", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["attempt_id"], ["test_attempts.attempt_id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["question_id"], ["questions.question_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("student_answer_id"),
    )
    op.create_table(
        "student_answer_selected_options",
        sa.Column("student_answer_id", sa.UUID(), nullable=False),
        sa.Column("answer_option_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["answer_option_id"],
            ["answer_options.answer_id"],
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["student_answer_id"],
            ["student_answers.student_answer_id"],
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("student_answer_id", "answer_option_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("student_answer_selected_options")
    op.drop_table("student_answers")
    op.drop_table("answer_options")
    op.drop_table("test_attempts")
    op.drop_table("questions")
    op.drop_index(op.f("ix_tests_teacher_id"), table_name="tests")
    op.drop_table("tests")
    op.drop_table("role_request")
    op.drop_table("auth_entity")
    # ### end Alembic commands ###
